openapi: 3.0.2
info:
  contact:
    email: ano@dixa.com
  description: Platform for executing and monitoring Chaos experiments on the Dixa
    Test System, supporting the microservice-based system resiliency experimentation.
  title: Dixa Testing Platform - OpenAPI 3.0
  version: 0.0.1
servers:
- url: http://dixatestplatform/chaos
tags:
- description: Definitions for test scenarios.
  name: tests
- description: Results of test scenarios.
  name: runs
paths:
  /tests:
    get:
      operationId: getTests
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tests'
          description: Successfuly operation
      summary: Get all tests
      tags:
      - tests
      x-eov-operation-handler: controllers/TestsController
  /test:
    post:
      operationId: addTest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Test'
        description: Create a new Test
        required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid inputs
      summary: Add a new Test
      tags:
      - tests
      x-eov-operation-handler: controllers/TestsController
  /test/{id}:
    delete:
      operationId: deleteTest
      parameters:
      - description: ID of a Test
        example: e0064a57-b327-4f77-82d7-8042911613e8
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Successful operation
        "404":
          description: Test not found
      summary: Delete Test
      tags:
      - tests
      x-eov-operation-handler: controllers/TestsController
    get:
      operationId: getTest
      parameters:
      - description: ID of a Test
        example: e0064a57-b327-4f77-82d7-8042911613e8
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
          description: Successful operation
        "404":
          description: Test Not Found
      summary: Get a single Test
      tags:
      - tests
      x-eov-operation-handler: controllers/TestsController
  /test/{id}/run/{mode}:
    post:
      operationId: runTest
      parameters:
      - description: ID of the test to execute
        example: e0064a57-b327-4f77-82d7-8042911613e8
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: mode
        required: true
        schema:
          enum:
          - canary
          - production
          type: string
        style: simple
      responses:
        "200":
          description: Test has started successfuly
        "400":
          description: Mode not supported
        "404":
          description: Test not found
      summary: Execute test scenarios.
      tags:
      - tests
      x-eov-operation-handler: controllers/TestsController
  /test/{id}/stop:
    post:
      operationId: stopTest
      parameters:
      - description: ID of the test to stop
        example: e0064a57-b327-4f77-82d7-8042911613e8
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Test has started successfuly
        "404":
          description: Test not found
      summary: Stops the test scenario immediately, in a Big Red Button fashion.
      tags:
      - tests
      x-eov-operation-handler: controllers/TestsController
  /runs:
    get:
      operationId: getRuns
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Runs'
          description: Successfuly operation
      summary: Get all Runs
      tags:
      - runs
      x-eov-operation-handler: controllers/RunsController
  /run:
    post:
      operationId: addRun
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Run'
        description: Create a new Run
        required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid inputs
      summary: Add a new Run
      tags:
      - runs
      x-eov-operation-handler: controllers/RunsController
  /run/{id}:
    delete:
      operationId: deleteRun
      parameters:
      - description: ID of a Run
        example: e0064a57-b327-4f77-82d7-8042911613e8
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Successful operation
        "404":
          description: Run not found
      summary: Delete Run
      tags:
      - runs
      x-eov-operation-handler: controllers/RunsController
    get:
      operationId: getRun
      parameters:
      - description: ID of a Run
        example: e0064a57-b327-4f77-82d7-8042911613e8
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Run'
          description: Successful operation
        "404":
          description: Run Not Found
      summary: Get a single Run
      tags:
      - runs
      x-eov-operation-handler: controllers/RunsController
components:
  schemas:
    Test:
      example:
        displayName: long-timeout
        downstreamService: message-service
        created_at: 2017-07-21T17:32:28Z
        description: description
        id: e0064a57-b327-4f77-82d7-8042911613e8
        upstreamService: conversation-service
        spec:
          redirect:
            authority: authority
            redirectCode: 5
            uri: uri
          headers:
            request:
              add:
                key: add
              set:
                key: set
              remove:
              - remove
              - remove
            response:
              add:
                key: add
              set:
                key: set
              remove:
              - remove
              - remove
          mirror:
            port:
              number: 0
            host: host
            subset: subset
          mirrorPercent: 9
          corsPolicy:
            allowMethods:
            - allowMethods
            - allowMethods
            allowHeaders:
            - allowHeaders
            - allowHeaders
            exposeHeaders:
            - exposeHeaders
            - exposeHeaders
            maxAge: maxAge
            allowCredentials: true
            allowOrigin:
            - allowOrigin
            - allowOrigin
            allowOrigins:
            - null
            - null
          match:
          - gateways:
            - gateways
            - gateways
            headers: {}
            sourceLabels:
              key: sourceLabels
            queryParams: {}
            ignoreUriCase: true
            port: 1
            name: name
            sourceNamespace: sourceNamespace
            withoutHeaders: {}
          - gateways:
            - gateways
            - gateways
            headers: {}
            sourceLabels:
              key: sourceLabels
            queryParams: {}
            ignoreUriCase: true
            port: 1
            name: name
            sourceNamespace: sourceNamespace
            withoutHeaders: {}
          fault:
            delay:
              percentage:
                value: 7.061401241503109
              percent: 2
            abort:
              percentage:
                value: 7.061401241503109
          mirrorPercentage:
            value: 7.061401241503109
          rewrite:
            authority: authority
            uri: uri
          timeout: timeout
          delegate:
            name: name
            namespace: namespace
          retries:
            perTryTimeout: perTryTimeout
            retryRemoteLocalities: true
            attempts: 5
            retryOn: retryOn
          route:
          - headers:
              request:
                add:
                  key: add
                set:
                  key: set
                remove:
                - remove
                - remove
              response:
                add:
                  key: add
                set:
                  key: set
                remove:
                - remove
                - remove
            destination:
              port:
                number: 0
              host: host
              subset: subset
            weight: 6
          - headers:
              request:
                add:
                  key: add
                set:
                  key: set
                remove:
                - remove
                - remove
              response:
                add:
                  key: add
                set:
                  key: set
                remove:
                - remove
                - remove
            destination:
              port:
                number: 0
              host: host
              subset: subset
            weight: 6
          name: name
      properties:
        id:
          example: e0064a57-b327-4f77-82d7-8042911613e8
          format: uuid
          type: string
        created_at:
          example: 2017-07-21T17:32:28Z
          format: date-time
          type: string
        displayName:
          example: long-timeout
          type: string
        description:
          description: Description of a tests scenario.
          type: string
        upstreamService:
          description: Name of the upstream source service from which traffic flows
            to the downstreamService.
          example: conversation-service
          type: string
        downstreamService:
          description: Name of the downstream target service to which traffic flows
            from the upstreamService.
          example: message-service
          type: string
        spec:
          $ref: '#/components/schemas/istio.networking.v1alpha3.HTTPRoute'
    Tests:
      items:
        $ref: '#/components/schemas/Test'
      type: array
    Run:
      example:
        mode: canary
        created_at: 2017-07-21T17:32:28Z
        testId: e0064a57-b327-4f77-82d7-8042911613e8
        id: e0064a57-b327-4f77-82d7-8042911613e8
        results:
          downstreamService:
            name: conversation-service
            logs: logs
          upstreamService:
            name: conversation-service
            logs: logs
          status: PASS
        status: started
      properties:
        id:
          example: e0064a57-b327-4f77-82d7-8042911613e8
          format: uuid
          type: string
        testId:
          example: e0064a57-b327-4f77-82d7-8042911613e8
          format: uuid
          type: string
        status:
          description: Status of the Test
          enum:
          - started
          - running
          - stopped
          - finished
          type: string
        created_at:
          example: 2017-07-21T17:32:28Z
          format: date-time
          type: string
        results:
          $ref: '#/components/schemas/Run_results'
        mode:
          enum:
          - canary
          - production
          type: string
    Runs:
      items:
        $ref: '#/components/schemas/Run'
      type: array
    istio.networking.v1alpha3.HTTPRoute:
      description: Describes match conditions and actions for routing HTTP/1.1, HTTP2,
        and gRPC traffic. See VirtualService for usage examples.
      example:
        redirect:
          authority: authority
          redirectCode: 5
          uri: uri
        headers:
          request:
            add:
              key: add
            set:
              key: set
            remove:
            - remove
            - remove
          response:
            add:
              key: add
            set:
              key: set
            remove:
            - remove
            - remove
        mirror:
          port:
            number: 0
          host: host
          subset: subset
        mirrorPercent: 9
        corsPolicy:
          allowMethods:
          - allowMethods
          - allowMethods
          allowHeaders:
          - allowHeaders
          - allowHeaders
          exposeHeaders:
          - exposeHeaders
          - exposeHeaders
          maxAge: maxAge
          allowCredentials: true
          allowOrigin:
          - allowOrigin
          - allowOrigin
          allowOrigins:
          - null
          - null
        match:
        - gateways:
          - gateways
          - gateways
          headers: {}
          sourceLabels:
            key: sourceLabels
          queryParams: {}
          ignoreUriCase: true
          port: 1
          name: name
          sourceNamespace: sourceNamespace
          withoutHeaders: {}
        - gateways:
          - gateways
          - gateways
          headers: {}
          sourceLabels:
            key: sourceLabels
          queryParams: {}
          ignoreUriCase: true
          port: 1
          name: name
          sourceNamespace: sourceNamespace
          withoutHeaders: {}
        fault:
          delay:
            percentage:
              value: 7.061401241503109
            percent: 2
          abort:
            percentage:
              value: 7.061401241503109
        mirrorPercentage:
          value: 7.061401241503109
        rewrite:
          authority: authority
          uri: uri
        timeout: timeout
        delegate:
          name: name
          namespace: namespace
        retries:
          perTryTimeout: perTryTimeout
          retryRemoteLocalities: true
          attempts: 5
          retryOn: retryOn
        route:
        - headers:
            request:
              add:
                key: add
              set:
                key: set
              remove:
              - remove
              - remove
            response:
              add:
                key: add
              set:
                key: set
              remove:
              - remove
              - remove
          destination:
            port:
              number: 0
            host: host
            subset: subset
          weight: 6
        - headers:
            request:
              add:
                key: add
              set:
                key: set
              remove:
              - remove
              - remove
            response:
              add:
                key: add
              set:
                key: set
              remove:
              - remove
              - remove
          destination:
            port:
              number: 0
            host: host
            subset: subset
          weight: 6
        name: name
      properties:
        name:
          description: The name assigned to the route for debugging purposes. The
            route's name will be concatenated with the match's name and will be logged
            in the access logs for requests matching this route/match.
          type: string
        route:
          description: A HTTP rule can either redirect or forward (default) traffic.
            The forwarding target can be one of several versions of a service (see
            glossary in beginning of document). Weights associated with the service
            version determine the proportion of traffic it receives.
          items:
            $ref: '#/components/schemas/istio.networking.v1alpha3.HTTPRouteDestination'
          type: array
        match:
          description: Match conditions to be satisfied for the rule to be activated.
            All conditions inside a single match block have AND semantics, while the
            list of match blocks have OR semantics. The rule is matched if any one
            of the match blocks succeed.
          items:
            $ref: '#/components/schemas/istio.networking.v1alpha3.HTTPMatchRequest'
          type: array
        redirect:
          $ref: '#/components/schemas/istio.networking.v1alpha3.HTTPRedirect'
        delegate:
          $ref: '#/components/schemas/istio.networking.v1alpha3.Delegate'
        rewrite:
          $ref: '#/components/schemas/istio.networking.v1alpha3.HTTPRewrite'
        timeout:
          description: Timeout for HTTP requests, default is disabled.
          type: string
        retries:
          $ref: '#/components/schemas/istio.networking.v1alpha3.HTTPRetry'
        fault:
          $ref: '#/components/schemas/istio.networking.v1alpha3.HTTPFaultInjection'
        mirror:
          $ref: '#/components/schemas/istio.networking.v1alpha3.Destination'
        mirrorPercent:
          deprecated: true
          description: Percentage of the traffic to be mirrored by the `mirror` field.
            Use of integer `mirror_percent` value is deprecated. Use the double `mirror_percentage`
            field instead
          nullable: true
          type: integer
        mirrorPercentage:
          $ref: '#/components/schemas/istio.networking.v1alpha3.Percent'
        corsPolicy:
          $ref: '#/components/schemas/istio.networking.v1alpha3.CorsPolicy'
        headers:
          $ref: '#/components/schemas/istio.networking.v1alpha3.Headers'
      type: object
    istio.networking.v1alpha3.HTTPRouteDestination:
      description: Each routing rule is associated with one or more service versions
        (see glossary in beginning of document). Weights associated with the version
        determine the proportion of traffic it receives. For example, the following
        rule will route 25% of traffic for the "reviews" service to instances with
        the "v2" tag and the remaining traffic (i.e., 75%) to "v1".
      example:
        headers:
          request:
            add:
              key: add
            set:
              key: set
            remove:
            - remove
            - remove
          response:
            add:
              key: add
            set:
              key: set
            remove:
            - remove
            - remove
        destination:
          port:
            number: 0
          host: host
          subset: subset
        weight: 6
      properties:
        headers:
          $ref: '#/components/schemas/istio.networking.v1alpha3.Headers'
        destination:
          $ref: '#/components/schemas/istio.networking.v1alpha3.Destination'
        weight:
          description: The proportion of traffic to be forwarded to the service version.
            (0-100). Sum of weights across destinations SHOULD BE == 100. If there
            is only one destination in a rule, the weight value is assumed to be 100.
          format: int32
          type: integer
      type: object
    istio.networking.v1alpha3.Headers:
      description: Message headers can be manipulated when Envoy forwards requests
        to, or responses from, a destination service. Header manipulation rules can
        be specified for a specific route destination or for all destinations. The
        following VirtualService adds a `test` header with the value `true` to requests
        that are routed to any `reviews` service destination. It also removes the
        `foo` response header, but only from responses coming from the `v1` subset
        (version) of the `reviews` service.
      example:
        request:
          add:
            key: add
          set:
            key: set
          remove:
          - remove
          - remove
        response:
          add:
            key: add
          set:
            key: set
          remove:
          - remove
          - remove
      properties:
        response:
          $ref: '#/components/schemas/istio.networking.v1alpha3.Headers.HeaderOperations'
        request:
          $ref: '#/components/schemas/istio.networking.v1alpha3.Headers.HeaderOperations'
      type: object
    istio.networking.v1alpha3.Headers.HeaderOperations:
      description: HeaderOperations Describes the header manipulations to apply
      example:
        add:
          key: add
        set:
          key: set
        remove:
        - remove
        - remove
      properties:
        set:
          additionalProperties:
            type: string
          description: Overwrite the headers specified by key with the given values
          type: object
        add:
          additionalProperties:
            type: string
          description: Append the given values to the headers specified by keys (will
            create a comma-separated list of values)
          type: object
        remove:
          description: Remove a the specified headers
          items:
            type: string
          type: array
      type: object
    istio.networking.v1alpha3.Destination:
      description: Destination indicates the network addressable service to which
        the request/connection will be sent after processing a routing rule. The destination.host
        should unambiguously refer to a service in the service registry. Istio's service
        registry is composed of all the services found in the platform's service registry
        (e.g., Kubernetes services, Consul services), as well as services declared
        through the [ServiceEntry](https://istio.io/docs/reference/config/networking/service-entry/#ServiceEntry)
        resource.
      example:
        port:
          number: 0
        host: host
        subset: subset
      properties:
        host:
          description: The name of a service from the service registry. Service names
            are looked up from the platform's service registry (e.g., Kubernetes services,
            Consul services, etc.) and from the hosts declared by [ServiceEntry](https://istio.io/docs/reference/config/networking/service-entry/#ServiceEntry).
            Traffic forwarded to destinations that are not found in either of the
            two, will be dropped.
          type: string
        port:
          $ref: '#/components/schemas/istio.networking.v1alpha3.PortSelector'
        subset:
          description: The name of a subset within the service. Applicable only to
            services within the mesh. The subset must be defined in a corresponding
            DestinationRule.
          type: string
      type: object
    istio.networking.v1alpha3.PortSelector:
      description: PortSelector specifies the number of a port to be used for matching
        or selection for final routing.
      example:
        number: 0
      properties:
        number:
          description: Valid port number
          type: integer
      type: object
    istio.networking.v1alpha3.HTTPMatchRequest:
      description: HttpMatchRequest specifies a set of criterion to be met in order
        for the rule to be applied to the HTTP request. For example, the following
        restricts the rule to match only requests where the URL path starts with /ratings/v2/
        and the request contains a custom `end-user` header with value `jason`.
      example:
        gateways:
        - gateways
        - gateways
        headers: {}
        sourceLabels:
          key: sourceLabels
        queryParams: {}
        ignoreUriCase: true
        port: 1
        name: name
        sourceNamespace: sourceNamespace
        withoutHeaders: {}
      properties:
        name:
          description: The name assigned to a match. The match's name will be concatenated
            with the parent route's name and will be logged in the access logs for
            requests matching this route.
          type: string
        method:
          $ref: '#/components/schemas/istio.networking.v1alpha3.StringMatch'
        port:
          description: Specifies the ports on the host that is being addressed. Many
            services only expose a single port or label ports with the protocols they
            support, in these cases it is not required to explicitly select the port.
          type: integer
        gateways:
          description: Names of gateways where the rule should be applied. Gateway
            names in the top-level `gateways` field of the VirtualService (if any)
            are overridden. The gateway match is independent of sourceLabels.
          items:
            type: string
          type: array
        headers:
          additionalProperties:
            $ref: '#/components/schemas/istio.networking.v1alpha3.StringMatch'
          description: The header keys must be lowercase and use hyphen as the separator,
            e.g. _x-request-id_.
          type: object
        uri:
          $ref: '#/components/schemas/istio.networking.v1alpha3.StringMatch'
        scheme:
          $ref: '#/components/schemas/istio.networking.v1alpha3.StringMatch'
        authority:
          $ref: '#/components/schemas/istio.networking.v1alpha3.StringMatch'
        sourceLabels:
          additionalProperties:
            type: string
          description: One or more labels that constrain the applicability of a rule
            to workloads with the given labels. If the VirtualService has a list of
            gateways specified in the top-level `gateways` field, it must include
            the reserved gateway `mesh` for this field to be applicable.
          type: object
        queryParams:
          additionalProperties:
            $ref: '#/components/schemas/istio.networking.v1alpha3.StringMatch'
          description: Query parameters for matching.
          type: object
        ignoreUriCase:
          description: Flag to specify whether the URI matching should be case-insensitive.
          type: boolean
        withoutHeaders:
          additionalProperties:
            $ref: '#/components/schemas/istio.networking.v1alpha3.StringMatch'
          description: withoutHeader has the same syntax with the header, but has
            opposite meaning. If a header is matched with a matching rule among withoutHeader,
            the traffic becomes not matched one.
          type: object
        sourceNamespace:
          description: Source namespace constraining the applicability of a rule to
            workloads in that namespace. If the VirtualService has a list of gateways
            specified in the top-level `gateways` field, it must include the reserved
            gateway `mesh` for this field to be applicable.
          type: string
      type: object
    istio.networking.v1alpha3.StringMatch:
      description: Describes how to match a given string in HTTP headers. Match is
        case-sensitive.
      oneOf:
      - not:
          anyOf:
          - properties:
              exact:
                description: exact string match
                type: string
            required:
            - exact
          - properties:
              prefix:
                description: prefix-based match
                type: string
            required:
            - prefix
          - properties:
              regex:
                description: RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
                type: string
            required:
            - regex
      - $ref: '#/components/schemas/istio_networking_v1alpha3_StringMatch_oneOf'
      - $ref: '#/components/schemas/istio_networking_v1alpha3_StringMatch_oneOf_1'
      - $ref: '#/components/schemas/istio_networking_v1alpha3_StringMatch_oneOf_2'
      type: object
    istio.networking.v1alpha3.HTTPRedirect:
      description: HTTPRedirect can be used to send a 301 redirect response to the
        caller, where the Authority/Host and the URI in the response can be swapped
        with the specified values. For example, the following rule redirects requests
        for /v1/getProductRatings API on the ratings service to /v1/bookRatings provided
        by the bookratings service.
      example:
        authority: authority
        redirectCode: 5
        uri: uri
      properties:
        uri:
          description: On a redirect, overwrite the Path portion of the URL with this
            value. Note that the entire path will be replaced, irrespective of the
            request URI being matched as an exact path or prefix.
          type: string
        authority:
          description: On a redirect, overwrite the Authority/Host portion of the
            URL with this value.
          type: string
        redirectCode:
          description: On a redirect, Specifies the HTTP status code to use in the
            redirect response. The default response code is MOVED_PERMANENTLY (301).
          type: integer
      type: object
    istio.networking.v1alpha3.Delegate:
      description: Describes the delegate VirtualService. The following routing rules
        forward the traffic to `/productpage` by a delegate VirtualService named `productpage`,
        forward the traffic to `/reviews` by a delegate VirtualService named `reviews`.
      example:
        name: name
        namespace: namespace
      properties:
        name:
          description: Name specifies the name of the delegate VirtualService.
          type: string
        namespace:
          description: Namespace specifies the namespace where the delegate VirtualService
            resides. By default, it is same to the root's.
          type: string
      type: object
    istio.networking.v1alpha3.HTTPRewrite:
      description: HTTPRewrite can be used to rewrite specific parts of a HTTP request
        before forwarding the request to the destination. Rewrite primitive can be
        used only with HTTPRouteDestination. The following example demonstrates how
        to rewrite the URL prefix for api call (/ratings) to ratings service before
        making the actual API call.
      example:
        authority: authority
        uri: uri
      properties:
        uri:
          description: rewrite the path (or the prefix) portion of the URI with this
            value. If the original URI was matched based on prefix, the value provided
            in this field will replace the corresponding matched prefix.
          type: string
        authority:
          description: rewrite the Authority/Host header with this value.
          type: string
      type: object
    istio.networking.v1alpha3.HTTPRetry:
      description: Describes the retry policy to use when a HTTP request fails. For
        example, the following rule sets the maximum number of retries to 3 when calling
        ratings:v1 service, with a 2s timeout per retry attempt.
      example:
        perTryTimeout: perTryTimeout
        retryRemoteLocalities: true
        attempts: 5
        retryOn: retryOn
      properties:
        attempts:
          description: Number of retries to be allowed for a given request. The interval
            between retries will be determined automatically (25ms+). When request
            `timeout` of the [HTTP route](https://istio.io/docs/reference/config/networking/virtual-service/#HTTPRoute)
            or `per_try_timeout` is configured, the actual number of retries attempted
            also depends on the specified request `timeout` and `per_try_timeout`
            values.
          format: int32
          type: integer
        perTryTimeout:
          description: 'Timeout per attempt for a given request, including the initial
            call and any retries. Format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is
            same value as request `timeout` of the [HTTP route](https://istio.io/docs/reference/config/networking/virtual-service/#HTTPRoute),
            which means no timeout.'
          type: string
        retryOn:
          description: Specifies the conditions under which retry takes place. One
            or more policies can be specified using a ‘,’ delimited list. See the
            [retry policies](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on)
            and [gRPC retry policies](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-grpc-on)
            for more details.
          type: string
        retryRemoteLocalities:
          description: Flag to specify whether the retries should retry to other localities.
            See the [retry plugin configuration](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/http/http_connection_management#retry-plugin-configuration)
            for more details.
          nullable: true
          type: boolean
      type: object
    istio.networking.v1alpha3.HTTPFaultInjection:
      description: HTTPFaultInjection can be used to specify one or more faults to
        inject while forwarding HTTP requests to the destination specified in a route.
        Fault specification is part of a VirtualService rule. Faults include aborting
        the Http request from downstream service, and/or delaying proxying of requests.
        A fault rule MUST HAVE delay or abort or both.
      example:
        delay:
          percentage:
            value: 7.061401241503109
          percent: 2
        abort:
          percentage:
            value: 7.061401241503109
      properties:
        delay:
          $ref: '#/components/schemas/istio.networking.v1alpha3.HTTPFaultInjection.Delay'
        abort:
          $ref: '#/components/schemas/istio.networking.v1alpha3.HTTPFaultInjection.Abort'
      type: object
    istio.networking.v1alpha3.HTTPFaultInjection.Delay:
      description: 'Delay specification is used to inject latency into the request
        forwarding path. The following example will introduce a 5 second delay in
        1 out of every 1000 requests to the "v1" version of the "reviews" service
        from all pods with label env: prod'
      example:
        percentage:
          value: 7.061401241503109
        percent: 2
      oneOf:
      - not:
          anyOf:
          - properties:
              fixedDelay:
                description: 'Add a fixed delay before forwarding the request. Format:
                  1h/1m/1s/1ms. MUST be >=1ms.'
                type: string
            required:
            - fixedDelay
          - properties:
              exponentialDelay:
                type: string
            required:
            - exponentialDelay
      - $ref: '#/components/schemas/istio_networking_v1alpha3_HTTPFaultInjection_Delay_oneOf'
      - $ref: '#/components/schemas/istio_networking_v1alpha3_HTTPFaultInjection_Delay_oneOf_1'
      properties:
        percent:
          deprecated: true
          description: Percentage of requests on which the delay will be injected
            (0-100). Use of integer `percent` value is deprecated. Use the double
            `percentage` field instead.
          format: int32
          type: integer
        percentage:
          $ref: '#/components/schemas/istio.networking.v1alpha3.Percent'
      type: object
    istio.networking.v1alpha3.Percent:
      description: Percent specifies a percentage in the range of [0.0, 100.0].
      example:
        value: 7.061401241503109
      properties:
        value:
          format: double
          type: number
      type: object
    istio.networking.v1alpha3.HTTPFaultInjection.Abort:
      description: Abort specification is used to prematurely abort a request with
        a pre-specified error code. The following example will return an HTTP 400
        error code for 1 out of every 1000 requests to the "ratings" service "v1".
      example:
        percentage:
          value: 7.061401241503109
      oneOf:
      - not:
          anyOf:
          - properties:
              httpStatus:
                description: HTTP status code to use to abort the Http request.
                format: int32
                type: integer
            required:
            - httpStatus
          - properties:
              grpcStatus:
                type: string
            required:
            - grpcStatus
          - properties:
              http2Error:
                type: string
            required:
            - http2Error
      - $ref: '#/components/schemas/istio_networking_v1alpha3_HTTPFaultInjection_Abort_oneOf'
      - $ref: '#/components/schemas/istio_networking_v1alpha3_HTTPFaultInjection_Abort_oneOf_1'
      - $ref: '#/components/schemas/istio_networking_v1alpha3_HTTPFaultInjection_Abort_oneOf_2'
      properties:
        percentage:
          $ref: '#/components/schemas/istio.networking.v1alpha3.Percent'
      type: object
    istio.networking.v1alpha3.CorsPolicy:
      description: Describes the Cross-Origin Resource Sharing (CORS) policy, for
        a given service. Refer to [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)
        for further details about cross origin resource sharing. For example, the
        following rule restricts cross origin requests to those originating from example.com
        domain using HTTP POST/GET, and sets the `Access-Control-Allow-Credentials`
        header to false. In addition, it only exposes `X-Foo-bar` header and sets
        an expiry period of 1 day.
      example:
        allowMethods:
        - allowMethods
        - allowMethods
        allowHeaders:
        - allowHeaders
        - allowHeaders
        exposeHeaders:
        - exposeHeaders
        - exposeHeaders
        maxAge: maxAge
        allowCredentials: true
        allowOrigin:
        - allowOrigin
        - allowOrigin
        allowOrigins:
        - null
        - null
      properties:
        allowOrigin:
          deprecated: true
          description: The list of origins that are allowed to perform CORS requests.
            The content will be serialized into the Access-Control-Allow-Origin header.
            Wildcard * will allow all origins. $hide_from_docs
          items:
            type: string
          type: array
        allowOrigins:
          description: String patterns that match allowed origins. An origin is allowed
            if any of the string matchers match. If a match is found, then the outgoing
            Access-Control-Allow-Origin would be set to the origin as provided by
            the client.
          items:
            $ref: '#/components/schemas/istio.networking.v1alpha3.StringMatch'
          type: array
        allowMethods:
          description: List of HTTP methods allowed to access the resource. The content
            will be serialized into the Access-Control-Allow-Methods header.
          items:
            type: string
          type: array
        allowHeaders:
          description: List of HTTP headers that can be used when requesting the resource.
            Serialized to Access-Control-Allow-Headers header.
          items:
            type: string
          type: array
        exposeHeaders:
          description: A list of HTTP headers that the browsers are allowed to access.
            Serialized into Access-Control-Expose-Headers header.
          items:
            type: string
          type: array
        maxAge:
          description: Specifies how long the results of a preflight request can be
            cached. Translates to the `Access-Control-Max-Age` header.
          type: string
        allowCredentials:
          description: Indicates whether the caller is allowed to send the actual
            request (not the preflight) using credentials. Translates to `Access-Control-Allow-Credentials`
            header.
          nullable: true
          type: boolean
      type: object
    Run_results_upstreamService:
      example:
        name: conversation-service
        logs: logs
      properties:
        name:
          example: conversation-service
          type: string
        logs:
          type: string
      type: object
    Run_results:
      example:
        downstreamService:
          name: conversation-service
          logs: logs
        upstreamService:
          name: conversation-service
          logs: logs
        status: PASS
      properties:
        status:
          enum:
          - PASS
          - FAIL
          type: string
        upstreamService:
          $ref: '#/components/schemas/Run_results_upstreamService'
        downstreamService:
          $ref: '#/components/schemas/Run_results_upstreamService'
      type: object
    istio_networking_v1alpha3_StringMatch_oneOf:
      properties:
        exact:
          description: exact string match
          type: string
      required:
      - exact
    istio_networking_v1alpha3_StringMatch_oneOf_1:
      properties:
        prefix:
          description: prefix-based match
          type: string
      required:
      - prefix
    istio_networking_v1alpha3_StringMatch_oneOf_2:
      properties:
        regex:
          description: RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
          type: string
      required:
      - regex
    istio_networking_v1alpha3_HTTPFaultInjection_Delay_oneOf:
      properties:
        fixedDelay:
          description: 'Add a fixed delay before forwarding the request. Format: 1h/1m/1s/1ms.
            MUST be >=1ms.'
          type: string
      required:
      - fixedDelay
    istio_networking_v1alpha3_HTTPFaultInjection_Delay_oneOf_1:
      properties:
        exponentialDelay:
          type: string
      required:
      - exponentialDelay
    istio_networking_v1alpha3_HTTPFaultInjection_Abort_oneOf:
      properties:
        httpStatus:
          description: HTTP status code to use to abort the Http request.
          format: int32
          type: integer
      required:
      - httpStatus
    istio_networking_v1alpha3_HTTPFaultInjection_Abort_oneOf_1:
      properties:
        grpcStatus:
          type: string
      required:
      - grpcStatus
    istio_networking_v1alpha3_HTTPFaultInjection_Abort_oneOf_2:
      properties:
        http2Error:
          type: string
      required:
      - http2Error
