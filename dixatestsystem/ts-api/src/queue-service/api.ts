/* tslint:disable */
/* eslint-disable */
/**
 * Queue Service - OpenAPI 3.0
 * Queues the conversations to be handled by available agents.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: ano@dixa.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Queue
 */
export interface Queue {
    /**
     * 
     * @type {string}
     * @memberof Queue
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Queue
     */
    created_at?: string;
    /**
     * Algorithm used to offer services
     * @type {string}
     * @memberof Queue
     */
    offer_algorithm?: QueueOfferAlgorithmEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum QueueOfferAlgorithmEnum {
    OneAtATimeRandom = 'oneAtATimeRandom'
}

/**
 * A conversation to be offered.
 * @export
 * @interface QueuedConversation
 */
export interface QueuedConversation {
    /**
     * 
     * @type {string}
     * @memberof QueuedConversation
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof QueuedConversation
     */
    conversation_id?: string;
    /**
     * Whether the conversation has been offered to an agent already or not.
     * @type {boolean}
     * @memberof QueuedConversation
     */
    isLive?: boolean;
    /**
     * 
     * @type {string}
     * @memberof QueuedConversation
     */
    created_at?: string;
    /**
     * 
     * @type {string}
     * @memberof QueuedConversation
     */
    channel?: QueuedConversationChannelEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum QueuedConversationChannelEnum {
    Widget = 'widget',
    Telephony = 'telephony',
    Email = 'email',
    Whatsapp = 'whatsapp',
    Messenger = 'messenger'
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a Conversation to the Queue
         * @param {string} id ID of a Queue in which to put the conversation
         * @param {QueuedConversation} queuedConversation Create a new Queue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addConversationToQueue: async (id: string, queuedConversation: QueuedConversation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addConversationToQueue', 'id', id)
            // verify required parameter 'queuedConversation' is not null or undefined
            assertParamExists('addConversationToQueue', 'queuedConversation', queuedConversation)
            const localVarPath = `/queue/{id}/conversation`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queuedConversation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a new Queue
         * @param {Queue} queue Create a new Queue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQueue: async (queue: Queue, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'queue' is not null or undefined
            assertParamExists('addQueue', 'queue', queue)
            const localVarPath = `/queue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queue, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a single Queue
         * @param {string} id ID of a Queue in which to put the conversation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueue: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getQueue', 'id', id)
            const localVarPath = `/queue/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all available Queues
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueues: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/queues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a Conversation to the Queue
         * @param {string} id ID of a Queue in which to put the conversation
         * @param {QueuedConversation} queuedConversation Create a new Queue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addConversationToQueue(id: string, queuedConversation: QueuedConversation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addConversationToQueue(id, queuedConversation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add a new Queue
         * @param {Queue} queue Create a new Queue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addQueue(queue: Queue, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addQueue(queue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a single Queue
         * @param {string} id ID of a Queue in which to put the conversation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueue(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQueue(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all available Queues
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueues(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Queue>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQueues(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a Conversation to the Queue
         * @param {string} id ID of a Queue in which to put the conversation
         * @param {QueuedConversation} queuedConversation Create a new Queue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addConversationToQueue(id: string, queuedConversation: QueuedConversation, options?: any): AxiosPromise<void> {
            return localVarFp.addConversationToQueue(id, queuedConversation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a new Queue
         * @param {Queue} queue Create a new Queue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQueue(queue: Queue, options?: any): AxiosPromise<void> {
            return localVarFp.addQueue(queue, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a single Queue
         * @param {string} id ID of a Queue in which to put the conversation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueue(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.getQueue(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all available Queues
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueues(options?: any): AxiosPromise<Array<Queue>> {
            return localVarFp.getQueues(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Add a Conversation to the Queue
     * @param {string} id ID of a Queue in which to put the conversation
     * @param {QueuedConversation} queuedConversation Create a new Queue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addConversationToQueue(id: string, queuedConversation: QueuedConversation, options?: any) {
        return DefaultApiFp(this.configuration).addConversationToQueue(id, queuedConversation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a new Queue
     * @param {Queue} queue Create a new Queue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addQueue(queue: Queue, options?: any) {
        return DefaultApiFp(this.configuration).addQueue(queue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a single Queue
     * @param {string} id ID of a Queue in which to put the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQueue(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getQueue(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all available Queues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQueues(options?: any) {
        return DefaultApiFp(this.configuration).getQueues(options).then((request) => request(this.axios, this.basePath));
    }
}


