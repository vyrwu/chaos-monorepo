/* tslint:disable */
/* eslint-disable */
/**
 * Conversation Service - OpenAPI 3.0
 * Conversation service handles orchestration of conversations at Dixa.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: ano@dixa.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Conversation
 */
export interface Conversation {
    /**
     * 
     * @type {string}
     * @memberof Conversation
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Conversation
     */
    created_at?: string;
    /**
     * 
     * @type {string}
     * @memberof Conversation
     */
    closed_at?: string;
    /**
     * Channel that originated the Conversation
     * @type {string}
     * @memberof Conversation
     */
    channel?: ConversationChannelEnum;
    /**
     * Status of a Conversation
     * @type {string}
     * @memberof Conversation
     */
    status?: ConversationStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ConversationChannelEnum {
    Widget = 'widget',
    Telephony = 'telephony',
    Email = 'email',
    Whatsapp = 'whatsapp',
    Messenger = 'messenger'
}
/**
    * @export
    * @enum {string}
    */
export enum ConversationStatusEnum {
    Pending = 'pending',
    Unassigned = 'unassigned',
    Open = 'open',
    Closed = 'closed'
}

/**
 * 
 * @export
 * @interface ConversationMessage
 */
export interface ConversationMessage {
    /**
     * Message to be added to the conversation
     * @type {string}
     * @memberof ConversationMessage
     */
    message?: string;
    /**
     * Direction in which the message was sent
     * @type {string}
     * @memberof ConversationMessage
     */
    direction?: ConversationMessageDirectionEnum;
    /**
     * 
     * @type {string}
     * @memberof ConversationMessage
     */
    created_at?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ConversationMessageDirectionEnum {
    Inbound = 'inbound',
    Outbound = 'outbound'
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Conversation
         * @param {Conversation} conversation Create a new Conversation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addConversation: async (conversation: Conversation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversation' is not null or undefined
            assertParamExists('addConversation', 'conversation', conversation)
            const localVarPath = `/conversation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(conversation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add message to conversation
         * @param {string} id ID of a Conversation the message should be added to
         * @param {ConversationMessage} conversationMessage Add message to conversation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMessageToConversation: async (id: string, conversationMessage: ConversationMessage, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addMessageToConversation', 'id', id)
            // verify required parameter 'conversationMessage' is not null or undefined
            assertParamExists('addMessageToConversation', 'conversationMessage', conversationMessage)
            const localVarPath = `/conversation/{id}/message`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(conversationMessage, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Conversation
         * @param {string} id ID of a Conversation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConversation: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteConversation', 'id', id)
            const localVarPath = `/conversation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a single Conversation
         * @param {string} id ID of a Conversation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversation: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getConversation', 'id', id)
            const localVarPath = `/conversation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Conversations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversations: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/conversations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Messages in the Conversation
         * @param {string} id ID of a Conversation the message should be added to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessagesInConversation: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMessagesInConversation', 'id', id)
            const localVarPath = `/conversation/{id}/messages`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new Conversation
         * @param {Conversation} conversation Create a new Conversation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addConversation(conversation: Conversation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addConversation(conversation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add message to conversation
         * @param {string} id ID of a Conversation the message should be added to
         * @param {ConversationMessage} conversationMessage Add message to conversation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMessageToConversation(id: string, conversationMessage: ConversationMessage, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMessageToConversation(id, conversationMessage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Conversation
         * @param {string} id ID of a Conversation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteConversation(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConversation(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a single Conversation
         * @param {string} id ID of a Conversation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConversation(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Conversation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversation(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Conversations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConversations(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Conversation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversations(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Messages in the Conversation
         * @param {string} id ID of a Conversation the message should be added to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessagesInConversation(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConversationMessage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessagesInConversation(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new Conversation
         * @param {Conversation} conversation Create a new Conversation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addConversation(conversation: Conversation, options?: any): AxiosPromise<void> {
            return localVarFp.addConversation(conversation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add message to conversation
         * @param {string} id ID of a Conversation the message should be added to
         * @param {ConversationMessage} conversationMessage Add message to conversation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMessageToConversation(id: string, conversationMessage: ConversationMessage, options?: any): AxiosPromise<void> {
            return localVarFp.addMessageToConversation(id, conversationMessage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Conversation
         * @param {string} id ID of a Conversation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConversation(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteConversation(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a single Conversation
         * @param {string} id ID of a Conversation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversation(id: string, options?: any): AxiosPromise<Conversation> {
            return localVarFp.getConversation(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Conversations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversations(options?: any): AxiosPromise<Array<Conversation>> {
            return localVarFp.getConversations(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Messages in the Conversation
         * @param {string} id ID of a Conversation the message should be added to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessagesInConversation(id: string, options?: any): AxiosPromise<Array<ConversationMessage>> {
            return localVarFp.getMessagesInConversation(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Add a new Conversation
     * @param {Conversation} conversation Create a new Conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addConversation(conversation: Conversation, options?: any) {
        return DefaultApiFp(this.configuration).addConversation(conversation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add message to conversation
     * @param {string} id ID of a Conversation the message should be added to
     * @param {ConversationMessage} conversationMessage Add message to conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addMessageToConversation(id: string, conversationMessage: ConversationMessage, options?: any) {
        return DefaultApiFp(this.configuration).addMessageToConversation(id, conversationMessage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Conversation
     * @param {string} id ID of a Conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteConversation(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteConversation(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a single Conversation
     * @param {string} id ID of a Conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getConversation(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getConversation(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Conversations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getConversations(options?: any) {
        return DefaultApiFp(this.configuration).getConversations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Messages in the Conversation
     * @param {string} id ID of a Conversation the message should be added to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMessagesInConversation(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getMessagesInConversation(id, options).then((request) => request(this.axios, this.basePath));
    }
}


