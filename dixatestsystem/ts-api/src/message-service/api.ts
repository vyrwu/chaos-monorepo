/* tslint:disable */
/* eslint-disable */
/**
 * Messages Service - OpenAPI 3.0
 * Message service handles messages for conversations in Dixa.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: ano@dixa.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    id?: string;
    /**
     * Direction in which the message was sent
     * @type {string}
     * @memberof Message
     */
    direction?: MessageDirectionEnum;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    created_at?: string;
    /**
     * Channel that originated the Conversation
     * @type {string}
     * @memberof Message
     */
    initial_channel?: MessageInitialChannelEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum MessageDirectionEnum {
    Inbound = 'inbound',
    Outbound = 'outbound'
}
/**
    * @export
    * @enum {string}
    */
export enum MessageInitialChannelEnum {
    Widget = 'widget',
    Telephony = 'telephony',
    Email = 'email',
    Whatsapp = 'whatsapp',
    Messenger = 'messenger'
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new Message
         * @summary Add a new Message
         * @param {Message} message Create a new Message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMessage: async (message: Message, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'message' is not null or undefined
            assertParamExists('addMessage', 'message', message)
            const localVarPath = `/message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(message, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a single Message
         * @param {string} id ID of a Message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessage: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMessage', 'id', id)
            const localVarPath = `/message/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a single message
         * @param {string} id ID of a Message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessage: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMessage', 'id', id)
            const localVarPath = `/message/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Messages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessages: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a new Message
         * @summary Add a new Message
         * @param {Message} message Create a new Message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMessage(message: Message, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMessage(message, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a single Message
         * @param {string} id ID of a Message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMessage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMessage(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a single message
         * @param {string} id ID of a Message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessage(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessage(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Messages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessages(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Message>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessages(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Add a new Message
         * @summary Add a new Message
         * @param {Message} message Create a new Message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMessage(message: Message, options?: any): AxiosPromise<void> {
            return localVarFp.addMessage(message, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a single Message
         * @param {string} id ID of a Message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessage(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMessage(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a single message
         * @param {string} id ID of a Message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessage(id: string, options?: any): AxiosPromise<Message> {
            return localVarFp.getMessage(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Messages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessages(options?: any): AxiosPromise<Array<Message>> {
            return localVarFp.getMessages(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Add a new Message
     * @summary Add a new Message
     * @param {Message} message Create a new Message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addMessage(message: Message, options?: any) {
        return DefaultApiFp(this.configuration).addMessage(message, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a single Message
     * @param {string} id ID of a Message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMessage(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteMessage(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a single message
     * @param {string} id ID of a Message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMessage(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getMessage(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Messages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMessages(options?: any) {
        return DefaultApiFp(this.configuration).getMessages(options).then((request) => request(this.axios, this.basePath));
    }
}


